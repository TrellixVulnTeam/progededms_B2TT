apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    ports:
    - name: "80"
      port: 80
      targetPort: 8000
    selector:
      io.kompose.service: app
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: app
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/bridge: "true"
          io.kompose.service: app
      spec:
        containers:
        - env:
          - name: MAYAN_CELERY_BROKER_URL
            value: redis://:mayanredispassword@redis:6379/0
          - name: MAYAN_CELERY_RESULT_BACKEND
            value: redis://:mayanredispassword@redis:6379/1
          - name: MAYAN_DATABASES
            value: '{''default'':{''ENGINE'':''django.db.backends.postgresql'',''NAME'':''mayan'',''PASSWORD'':''mayandbpass'',''USER'':''mayan'',''HOST'':''postgresql''}}'
          - name: MAYAN_DOCKER_WAIT
            value: postgresql:5432 redis:6379
          image: ayoubbensakhria/mayanedms:3
          imagePullPolicy: ""
          name: app
          ports:
          - containerPort: 8000
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/mayan
            name: app
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: app
          persistentVolumeClaim:
            claimName: app
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: bridge
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/bridge: "true"
    podSelector:
      matchLabels:
        io.kompose.network/bridge: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: postgresql
    name: postgresql
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/bridge: "true"
          io.kompose.service: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRES_DB
            value: mayan
          - name: POSTGRES_PASSWORD
            value: mayandbpass
          - name: POSTGRES_USER
            value: mayan
          image: postgres:9.6-alpine
          imagePullPolicy: ""
          name: postgresql
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: postgres
          persistentVolumeClaim:
            claimName: postgres
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: postgres
    name: postgres
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: bridge
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/bridge: "true"
    podSelector:
      matchLabels:
        io.kompose.network/bridge: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: redis
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/bridge: "true"
          io.kompose.service: redis
      spec:
        containers:
        - args:
          - redis-server
          - --appendonly
          - no
          - --databases
          - "2"
          - --maxmemory
          - "5Gi"
          - --maxclients
          - "500"
          - --maxmemory-policy
          - allkeys-lru
          - --save
          - ""
          - --tcp-backlog
          - "256"
          - --requirepass
          - mayanredispassword
          image: redis:5.0-alpine
          imagePullPolicy: ""
          name: redis
          resources: {}
          volumeMounts:
          - mountPath: /data
            name: redis
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: redis
          persistentVolumeClaim:
            claimName: redis
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: bridge
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/bridge: "true"
    podSelector:
      matchLabels:
        io.kompose.network/bridge: "true"
kind: List
metadata: {}

